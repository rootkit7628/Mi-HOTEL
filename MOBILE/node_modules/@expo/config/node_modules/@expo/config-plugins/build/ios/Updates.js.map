{"version":3,"sources":["../../src/ios/Updates.ts"],"names":["CREATE_MANIFEST_IOS_PATH","Config","getSDKVersion","config","sdkVersion","getUpdatesEnabled","updates","enabled","getUpdatesTimeout","fallbackToCacheTimeout","getUpdatesCheckOnLaunch","checkAutomatically","withUpdates","expoUsername","modResults","setUpdatesConfig","expoPlist","username","newExpoPlist","ENABLED","CHECK_ON_LAUNCH","LAUNCH_WAIT_MS","updateUrl","UPDATE_URL","setVersionsConfig","runtimeVersion","SDK_VERSION","RUNTIME_VERSION","formatConfigurationScriptPath","projectRoot","buildScriptPath","resolveFrom","silent","Error","relativePath","path","relative","join","process","platform","replace","getBundleReactNativePhase","project","shellScriptBuildPhase","hash","objects","PBXShellScriptBuildPhase","bundleReactNative","Object","values","find","buildPhase","name","ensureBundleReactNativePhaseContainsConfigurationScript","buildPhaseShellScriptPath","isShellScriptBuildPhaseConfigured","shellScript","includes","RegExp","isPlistConfigurationSet","Boolean","EXUpdatesURL","EXUpdatesSDKVersion","EXUpdatesRuntimeVersion","isPlistConfigurationSynced","EXUpdatesEnabled","EXUpdatesLaunchWaitMs","EXUpdatesCheckOnLaunch","isPlistVersionConfigurationSynced","expectedRuntimeVersion","expectedSdkVersion","currentRuntimeVersion","currentSdkVersion"],"mappings":"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","sourcesContent":["import * as path from 'path';\nimport resolveFrom from 'resolve-from';\nimport xcode from 'xcode';\n\nimport { ConfigPlugin } from '../Plugin.types';\nimport { withExpoPlist } from '../plugins/ios-plugins';\nimport { ExpoConfigUpdates, getRuntimeVersionNullable, getUpdateUrl } from '../utils/Updates';\nimport { ExpoPlist } from './IosConfig.types';\n\nconst CREATE_MANIFEST_IOS_PATH = 'expo-updates/scripts/create-manifest-ios.sh';\n\nexport enum Config {\n  ENABLED = 'EXUpdatesEnabled',\n  CHECK_ON_LAUNCH = 'EXUpdatesCheckOnLaunch',\n  LAUNCH_WAIT_MS = 'EXUpdatesLaunchWaitMs',\n  RUNTIME_VERSION = 'EXUpdatesRuntimeVersion',\n  SDK_VERSION = 'EXUpdatesSDKVersion',\n  UPDATE_URL = 'EXUpdatesURL',\n  RELEASE_CHANNEL = 'EXUpdatesReleaseChannel',\n  UPDATES_CONFIGURATION_REQUEST_HEADERS_KEY = 'EXUpdatesRequestHeaders',\n}\n\nexport function getSDKVersion(config: Pick<ExpoConfigUpdates, 'sdkVersion'>): string | null {\n  return typeof config.sdkVersion === 'string' ? config.sdkVersion : null;\n}\n\nexport function getUpdatesEnabled(config: Pick<ExpoConfigUpdates, 'updates'>): boolean {\n  return config.updates?.enabled !== false;\n}\n\nexport function getUpdatesTimeout(config: Pick<ExpoConfigUpdates, 'updates'>) {\n  return config.updates?.fallbackToCacheTimeout ?? 0;\n}\n\nexport function getUpdatesCheckOnLaunch(\n  config: Pick<ExpoConfigUpdates, 'updates'>\n): 'NEVER' | 'ALWAYS' {\n  if (config.updates?.checkAutomatically === 'ON_ERROR_RECOVERY') {\n    return 'NEVER';\n  } else if (config.updates?.checkAutomatically === 'ON_LOAD') {\n    return 'ALWAYS';\n  }\n  return 'ALWAYS';\n}\n\nexport const withUpdates: ConfigPlugin<{ expoUsername: string | null }> = (\n  config,\n  { expoUsername }\n) => {\n  return withExpoPlist(config, config => {\n    config.modResults = setUpdatesConfig(config, config.modResults, expoUsername);\n    return config;\n  });\n};\n\nexport function setUpdatesConfig(\n  config: ExpoConfigUpdates,\n  expoPlist: ExpoPlist,\n  username: string | null\n): ExpoPlist {\n  const newExpoPlist = {\n    ...expoPlist,\n    [Config.ENABLED]: getUpdatesEnabled(config),\n    [Config.CHECK_ON_LAUNCH]: getUpdatesCheckOnLaunch(config),\n    [Config.LAUNCH_WAIT_MS]: getUpdatesTimeout(config),\n  };\n\n  const updateUrl = getUpdateUrl(config, username);\n  if (updateUrl) {\n    newExpoPlist[Config.UPDATE_URL] = updateUrl;\n  } else {\n    delete newExpoPlist[Config.UPDATE_URL];\n  }\n\n  return setVersionsConfig(config, newExpoPlist);\n}\n\nexport function setVersionsConfig(config: ExpoConfigUpdates, expoPlist: ExpoPlist): ExpoPlist {\n  const newExpoPlist = { ...expoPlist };\n\n  const runtimeVersion = getRuntimeVersionNullable(config, 'ios');\n  const sdkVersion = getSDKVersion(config);\n  if (runtimeVersion) {\n    delete newExpoPlist[Config.SDK_VERSION];\n    newExpoPlist[Config.RUNTIME_VERSION] = runtimeVersion;\n  } else if (sdkVersion) {\n    /**\n     * runtime version maybe null in projects using classic updates. In that\n     * case we use SDK version\n     */\n    delete newExpoPlist[Config.RUNTIME_VERSION];\n    newExpoPlist[Config.SDK_VERSION] = sdkVersion;\n  } else {\n    delete newExpoPlist[Config.SDK_VERSION];\n    delete newExpoPlist[Config.RUNTIME_VERSION];\n  }\n\n  return newExpoPlist;\n}\n\nfunction formatConfigurationScriptPath(projectRoot: string): string {\n  const buildScriptPath = resolveFrom.silent(projectRoot, CREATE_MANIFEST_IOS_PATH);\n\n  if (!buildScriptPath) {\n    throw new Error(\n      \"Could not find the build script for iOS. This could happen in case of outdated 'node_modules'. Run 'npm install' to make sure that it's up-to-date.\"\n    );\n  }\n\n  const relativePath = path.relative(path.join(projectRoot, 'ios'), buildScriptPath);\n  return process.platform === 'win32' ? relativePath.replace(/\\\\/g, '/') : relativePath;\n}\n\ninterface ShellScriptBuildPhase {\n  isa: 'PBXShellScriptBuildPhase';\n  name: string;\n  shellScript: string;\n  [key: string]: any;\n}\n\nexport function getBundleReactNativePhase(project: xcode.XcodeProject): ShellScriptBuildPhase {\n  const shellScriptBuildPhase = project.hash.project.objects.PBXShellScriptBuildPhase as Record<\n    string,\n    ShellScriptBuildPhase\n  >;\n  const bundleReactNative = Object.values(shellScriptBuildPhase).find(\n    buildPhase => buildPhase.name === '\"Bundle React Native code and images\"'\n  );\n\n  if (!bundleReactNative) {\n    throw new Error(`Couldn't find a build phase \"Bundle React Native code and images\"`);\n  }\n\n  return bundleReactNative;\n}\n\nexport function ensureBundleReactNativePhaseContainsConfigurationScript(\n  projectRoot: string,\n  project: xcode.XcodeProject\n): xcode.XcodeProject {\n  const bundleReactNative = getBundleReactNativePhase(project);\n  const buildPhaseShellScriptPath = formatConfigurationScriptPath(projectRoot);\n\n  if (!isShellScriptBuildPhaseConfigured(projectRoot, project)) {\n    // check if there's already another path to create-manifest-ios.sh\n    // this might be the case for monorepos\n    if (bundleReactNative.shellScript.includes(CREATE_MANIFEST_IOS_PATH)) {\n      bundleReactNative.shellScript = bundleReactNative.shellScript.replace(\n        new RegExp(`(\\\\\\\\n)(\\\\.\\\\.)+/node_modules/${CREATE_MANIFEST_IOS_PATH}`),\n        ''\n      );\n    }\n    bundleReactNative.shellScript = `${bundleReactNative.shellScript.replace(\n      /\"$/,\n      ''\n    )}${buildPhaseShellScriptPath}\\\\n\"`;\n  }\n  return project;\n}\n\nexport function isShellScriptBuildPhaseConfigured(\n  projectRoot: string,\n  project: xcode.XcodeProject\n): boolean {\n  const bundleReactNative = getBundleReactNativePhase(project);\n  const buildPhaseShellScriptPath = formatConfigurationScriptPath(projectRoot);\n  return bundleReactNative.shellScript.includes(buildPhaseShellScriptPath);\n}\n\nexport function isPlistConfigurationSet(expoPlist: ExpoPlist): boolean {\n  return Boolean(\n    expoPlist.EXUpdatesURL && (expoPlist.EXUpdatesSDKVersion || expoPlist.EXUpdatesRuntimeVersion)\n  );\n}\n\nexport function isPlistConfigurationSynced(\n  config: ExpoConfigUpdates,\n  expoPlist: ExpoPlist,\n  username: string | null\n): boolean {\n  return (\n    getUpdateUrl(config, username) === expoPlist.EXUpdatesURL &&\n    getUpdatesEnabled(config) === expoPlist.EXUpdatesEnabled &&\n    getUpdatesTimeout(config) === expoPlist.EXUpdatesLaunchWaitMs &&\n    getUpdatesCheckOnLaunch(config) === expoPlist.EXUpdatesCheckOnLaunch &&\n    isPlistVersionConfigurationSynced(config, expoPlist)\n  );\n}\n\nexport function isPlistVersionConfigurationSynced(\n  config: Pick<ExpoConfigUpdates, 'sdkVersion' | 'runtimeVersion'>,\n  expoPlist: ExpoPlist\n): boolean {\n  const expectedRuntimeVersion = getRuntimeVersionNullable(config, 'ios');\n  const expectedSdkVersion = getSDKVersion(config);\n\n  const currentRuntimeVersion = expoPlist.EXUpdatesRuntimeVersion ?? null;\n  const currentSdkVersion = expoPlist.EXUpdatesSDKVersion ?? null;\n\n  if (expectedRuntimeVersion !== null) {\n    return currentRuntimeVersion === expectedRuntimeVersion && currentSdkVersion === null;\n  } else if (expectedSdkVersion !== null) {\n    return currentSdkVersion === expectedSdkVersion && currentRuntimeVersion === null;\n  } else {\n    return true;\n  }\n}\n"],"file":"Updates.js"}