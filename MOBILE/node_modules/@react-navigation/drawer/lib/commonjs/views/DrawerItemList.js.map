{"version":3,"sources":["DrawerItemList.tsx"],"names":["DrawerItemList","state","navigation","descriptors","buildLink","focusedRoute","routes","index","focusedDescriptor","key","focusedOptions","options","drawerActiveTintColor","drawerInactiveTintColor","drawerActiveBackgroundColor","drawerInactiveBackgroundColor","map","route","i","focused","title","drawerLabel","drawerIcon","drawerLabelStyle","drawerItemStyle","undefined","name","params","dispatch","DrawerActions","closeDrawer","CommonActions","navigate","merge","target"],"mappings":";;;;;;;AAAA;;AAOA;;AAGA;;;;;;;;AAQA;AACA;AACA;AACe,SAASA,cAAT,CAAwB;AACrCC,EAAAA,KADqC;AAErCC,EAAAA,UAFqC;AAGrCC,EAAAA;AAHqC,CAAxB,EAIL;AACR,QAAMC,SAAS,GAAG,6BAAlB;AAEA,QAAMC,YAAY,GAAGJ,KAAK,CAACK,MAAN,CAAaL,KAAK,CAACM,KAAnB,CAArB;AACA,QAAMC,iBAAiB,GAAGL,WAAW,CAACE,YAAY,CAACI,GAAd,CAArC;AACA,QAAMC,cAAc,GAAGF,iBAAiB,CAACG,OAAzC;AAEA,QAAM;AACJC,IAAAA,qBADI;AAEJC,IAAAA,uBAFI;AAGJC,IAAAA,2BAHI;AAIJC,IAAAA;AAJI,MAKFL,cALJ;AAOA,SAAOT,KAAK,CAACK,MAAN,CAAaU,GAAb,CAAiB,CAACC,KAAD,EAAQC,CAAR,KAAc;AACpC,UAAMC,OAAO,GAAGD,CAAC,KAAKjB,KAAK,CAACM,KAA5B;AACA,UAAM;AACJa,MAAAA,KADI;AAEJC,MAAAA,WAFI;AAGJC,MAAAA,UAHI;AAIJC,MAAAA,gBAJI;AAKJC,MAAAA;AALI,QAMFrB,WAAW,CAACc,KAAK,CAACR,GAAP,CAAX,CAAuBE,OAN3B;AAQA,wBACE,oBAAC,mBAAD;AACE,MAAA,GAAG,EAAEM,KAAK,CAACR,GADb;AAEE,MAAA,KAAK,EACHY,WAAW,KAAKI,SAAhB,GACIJ,WADJ,GAEID,KAAK,KAAKK,SAAV,GACAL,KADA,GAEAH,KAAK,CAACS,IAPd;AASE,MAAA,IAAI,EAAEJ,UATR;AAUE,MAAA,OAAO,EAAEH,OAVX;AAWE,MAAA,eAAe,EAAEP,qBAXnB;AAYE,MAAA,iBAAiB,EAAEC,uBAZrB;AAaE,MAAA,qBAAqB,EAAEC,2BAbzB;AAcE,MAAA,uBAAuB,EAAEC,6BAd3B;AAeE,MAAA,UAAU,EAAEQ,gBAfd;AAgBE,MAAA,KAAK,EAAEC,eAhBT;AAiBE,MAAA,EAAE,EAAEpB,SAAS,CAACa,KAAK,CAACS,IAAP,EAAaT,KAAK,CAACU,MAAnB,CAjBf;AAkBE,MAAA,OAAO,EAAE,MAAM;AACbzB,QAAAA,UAAU,CAAC0B,QAAX,CAAoB,EAClB,IAAIT,OAAO,GACPU,sBAAcC,WAAd,EADO,GAEPC,sBAAcC,QAAd,CAAuB;AAAEN,YAAAA,IAAI,EAAET,KAAK,CAACS,IAAd;AAAoBO,YAAAA,KAAK,EAAE;AAA3B,WAAvB,CAFJ,CADkB;AAIlBC,UAAAA,MAAM,EAAEjC,KAAK,CAACQ;AAJI,SAApB;AAMD;AAzBH,MADF;AA6BD,GAvCM,CAAP;AAwCD","sourcesContent":["import {\n  CommonActions,\n  DrawerActions,\n  DrawerNavigationState,\n  ParamListBase,\n  useLinkBuilder,\n} from '@react-navigation/native';\nimport * as React from 'react';\n\nimport type { DrawerDescriptorMap, DrawerNavigationHelpers } from '../types';\nimport DrawerItem from './DrawerItem';\n\ntype Props = {\n  state: DrawerNavigationState<ParamListBase>;\n  navigation: DrawerNavigationHelpers;\n  descriptors: DrawerDescriptorMap;\n};\n\n/**\n * Component that renders the navigation list in the drawer.\n */\nexport default function DrawerItemList({\n  state,\n  navigation,\n  descriptors,\n}: Props) {\n  const buildLink = useLinkBuilder();\n\n  const focusedRoute = state.routes[state.index];\n  const focusedDescriptor = descriptors[focusedRoute.key];\n  const focusedOptions = focusedDescriptor.options;\n\n  const {\n    drawerActiveTintColor,\n    drawerInactiveTintColor,\n    drawerActiveBackgroundColor,\n    drawerInactiveBackgroundColor,\n  } = focusedOptions;\n\n  return state.routes.map((route, i) => {\n    const focused = i === state.index;\n    const {\n      title,\n      drawerLabel,\n      drawerIcon,\n      drawerLabelStyle,\n      drawerItemStyle,\n    } = descriptors[route.key].options;\n\n    return (\n      <DrawerItem\n        key={route.key}\n        label={\n          drawerLabel !== undefined\n            ? drawerLabel\n            : title !== undefined\n            ? title\n            : route.name\n        }\n        icon={drawerIcon}\n        focused={focused}\n        activeTintColor={drawerActiveTintColor}\n        inactiveTintColor={drawerInactiveTintColor}\n        activeBackgroundColor={drawerActiveBackgroundColor}\n        inactiveBackgroundColor={drawerInactiveBackgroundColor}\n        labelStyle={drawerLabelStyle}\n        style={drawerItemStyle}\n        to={buildLink(route.name, route.params)}\n        onPress={() => {\n          navigation.dispatch({\n            ...(focused\n              ? DrawerActions.closeDrawer()\n              : CommonActions.navigate({ name: route.name, merge: true })),\n            target: state.key,\n          });\n        }}\n      />\n    );\n  }) as React.ReactNode as React.ReactElement;\n}\n"]}