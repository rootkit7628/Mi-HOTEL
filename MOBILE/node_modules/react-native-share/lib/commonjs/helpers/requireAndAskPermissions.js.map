{"version":3,"sources":["requireAndAskPermissions.ts"],"names":["ANDROID_KIT_KAT_SDK_VERSION","androidPermissionRequestRequired","Platform","Version","parseInt","requireAndAskPermissions","options","url","urls","OS","resultArr","Promise","all","map","resolve","reject","NativeModules","RNShare","isBase64File","error","isBase64","requirePermission","includes","hasPermission","PermissionsAndroid","check","PERMISSIONS","WRITE_EXTERNAL_STORAGE","result","request","RESULTS","GRANTED","Error","e"],"mappings":";;;;;;;AAAA;;AAIA,MAAMA,2BAA2B,GAAG,EAApC;AACA,MAAMC,gCAAgC,GACpC,CAAC,OAAOC,sBAASC,OAAhB,KAA4B,QAA5B,GAAuCC,QAAQ,CAACF,sBAASC,OAAV,EAAmB,EAAnB,CAA/C,GAAwED,sBAASC,OAAlF,IACAH,2BAFF;;AAIA,MAAMK,wBAAwB,GAAG,OAC/BC,OAD+B,KAEF;AAC7B,MAAI,CAACA,OAAO,CAACC,GAAR,IAAeD,OAAO,CAACE,IAAxB,KAAiCN,sBAASO,EAAT,KAAgB,SAArD,EAAgE;AAC9D,UAAMD,IAAc,GAAGF,OAAO,CAACE,IAAR,KAAiBF,OAAO,CAACC,GAAR,GAAc,CAACD,OAAO,CAACC,GAAT,CAAd,GAA8B,EAA/C,CAAvB;;AACA,QAAI;AACF,YAAMG,SAAS,GAAG,MAAMC,OAAO,CAACC,GAAR,CACtBJ,IAAI,CAACK,GAAL,CACGN,GAAD,IACE,IAAII,OAAJ,CAAY,CAACG,OAAD,EAAUC,MAAV,KAAqB;AAC/BC,mCAAcC,OAAd,CAAsBC,YAAtB,CACEX,GADF,EAEGY,KAAD,IAAW;AACTJ,UAAAA,MAAM,CAACI,KAAD,CAAN;AACD,SAJH,EAKGC,QAAD,IAAc;AACZN,UAAAA,OAAO,CAACM,QAAD,CAAP;AACD,SAPH;AASD,OAVD,CAFJ,CADsB,CAAxB;AAiBA,YAAMC,iBAAiB,GAAGX,SAAS,CAACY,QAAV,CAAmB,IAAnB,CAA1B;;AACA,UAAI,CAACD,iBAAL,EAAwB;AACtB,eAAOV,OAAO,CAACG,OAAR,CAAgB,IAAhB,CAAP;AACD;;AACD,YAAMS,aAAa,GAAG,MAAMC,gCAAmBC,KAAnB,CAC1BD,gCAAmBE,WAAnB,CAA+BC,sBADL,CAA5B;;AAGA,UAAIJ,aAAJ,EAAmB;AACjB,eAAOZ,OAAO,CAACG,OAAR,CAAgB,IAAhB,CAAP;AACD;;AAED,UAAIb,gCAAJ,EAAsC;AACpC,cAAM2B,MAAM,GAAG,MAAMJ,gCAAmBK,OAAnB,CACnBL,gCAAmBE,WAAnB,CAA+BC,sBADZ,CAArB;;AAGA,YAAIC,MAAM,KAAKJ,gCAAmBM,OAAnB,CAA2BC,OAA1C,EAAmD;AACjD,iBAAOpB,OAAO,CAACG,OAAR,CAAgB,IAAhB,CAAP;AACD;;AACD,cAAM,IAAIkB,KAAJ,CAAU,gCAAV,CAAN;AACD;AACF,KAtCD,CAsCE,OAAOC,CAAP,EAAU;AACV,aAAOtB,OAAO,CAACI,MAAR,CAAekB,CAAf,CAAP;AACD;AACF;;AACD,SAAOtB,OAAO,CAACG,OAAR,CAAgB,IAAhB,CAAP;AACD,CAhDD;;eAkDeT,wB","sourcesContent":["import { NativeModules, Platform, PermissionsAndroid } from 'react-native';\n\nimport { ShareOptions } from '../types';\n\nconst ANDROID_KIT_KAT_SDK_VERSION = 19;\nconst androidPermissionRequestRequired =\n  (typeof Platform.Version === 'string' ? parseInt(Platform.Version, 10) : Platform.Version) <\n  ANDROID_KIT_KAT_SDK_VERSION;\n\nconst requireAndAskPermissions = async (\n  options: Pick<ShareOptions, 'url' | 'urls'>,\n): Promise<boolean | never> => {\n  if ((options.url || options.urls) && Platform.OS === 'android') {\n    const urls: string[] = options.urls || (options.url ? [options.url] : []);\n    try {\n      const resultArr = await Promise.all(\n        urls.map(\n          (url) =>\n            new Promise((resolve, reject) => {\n              NativeModules.RNShare.isBase64File(\n                url,\n                (error) => {\n                  reject(error);\n                },\n                (isBase64) => {\n                  resolve(isBase64);\n                },\n              );\n            }),\n        ),\n      );\n\n      const requirePermission = resultArr.includes(true);\n      if (!requirePermission) {\n        return Promise.resolve(true);\n      }\n      const hasPermission = await PermissionsAndroid.check(\n        PermissionsAndroid.PERMISSIONS.WRITE_EXTERNAL_STORAGE,\n      );\n      if (hasPermission) {\n        return Promise.resolve(true);\n      }\n\n      if (androidPermissionRequestRequired) {\n        const result = await PermissionsAndroid.request(\n          PermissionsAndroid.PERMISSIONS.WRITE_EXTERNAL_STORAGE,\n        );\n        if (result === PermissionsAndroid.RESULTS.GRANTED) {\n          return Promise.resolve(true);\n        }\n        throw new Error('Write Permission not available');\n      }\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  }\n  return Promise.resolve(true);\n};\n\nexport default requireAndAskPermissions;\n"]}