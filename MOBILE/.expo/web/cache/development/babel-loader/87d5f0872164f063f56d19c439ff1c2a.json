{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport InteractionManager from \"react-native-web/dist/exports/InteractionManager\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { PanGestureHandler, State as GestureState } from 'react-native-gesture-handler';\nimport Animated, { interpolate, runOnJS, useAnimatedGestureHandler, useAnimatedStyle, useDerivedValue, useSharedValue, withSpring } from 'react-native-reanimated';\nimport DrawerProgressContext from \"../../utils/DrawerProgressContext\";\nimport Overlay from \"./Overlay\";\nvar SWIPE_DISTANCE_MINIMUM = 5;\nvar DEFAULT_DRAWER_WIDTH = '80%';\n\nvar minmax = function minmax(value, start, end) {\n  'worklet';\n\n  return Math.min(Math.max(value, start), end);\n};\n\nexport default function Drawer(_ref) {\n  var dimensions = _ref.dimensions,\n      drawerPosition = _ref.drawerPosition,\n      drawerStyle = _ref.drawerStyle,\n      drawerType = _ref.drawerType,\n      gestureHandlerProps = _ref.gestureHandlerProps,\n      hideStatusBarOnOpen = _ref.hideStatusBarOnOpen,\n      keyboardDismissMode = _ref.keyboardDismissMode,\n      onClose = _ref.onClose,\n      onOpen = _ref.onOpen,\n      open = _ref.open,\n      overlayStyle = _ref.overlayStyle,\n      renderDrawerContent = _ref.renderDrawerContent,\n      renderSceneContent = _ref.renderSceneContent,\n      statusBarAnimation = _ref.statusBarAnimation,\n      swipeDistanceThreshold = _ref.swipeDistanceThreshold,\n      swipeEdgeWidth = _ref.swipeEdgeWidth,\n      swipeEnabled = _ref.swipeEnabled,\n      swipeVelocityThreshold = _ref.swipeVelocityThreshold;\n\n  var getDrawerWidth = function getDrawerWidth() {\n    var _ref2 = StyleSheet.flatten(drawerStyle) || {},\n        _ref2$width = _ref2.width,\n        width = _ref2$width === void 0 ? DEFAULT_DRAWER_WIDTH : _ref2$width;\n\n    if (typeof width === 'string' && width.endsWith('%')) {\n      var percentage = Number(width.replace(/%$/, ''));\n\n      if (Number.isFinite(percentage)) {\n        return dimensions.width * (percentage / 100);\n      }\n    }\n\n    return typeof width === 'number' ? width : 0;\n  };\n\n  var drawerWidth = getDrawerWidth();\n  var isOpen = drawerType === 'permanent' ? true : open;\n  var isRight = drawerPosition === 'right';\n  var getDrawerTranslationX = React.useCallback(function (open) {\n    'worklet';\n\n    if (drawerPosition === 'left') {\n      return open ? 0 : -drawerWidth;\n    }\n\n    return open ? 0 : drawerWidth;\n  }, [drawerPosition, drawerWidth]);\n  var hideStatusBar = React.useCallback(function (hide) {\n    if (hideStatusBarOnOpen) {\n      StatusBar.setHidden(hide, statusBarAnimation);\n    }\n  }, [hideStatusBarOnOpen, statusBarAnimation]);\n  React.useEffect(function () {\n    hideStatusBar(isOpen);\n    return function () {\n      return hideStatusBar(false);\n    };\n  }, [isOpen, hideStatusBarOnOpen, statusBarAnimation, hideStatusBar]);\n  var interactionHandleRef = React.useRef(null);\n\n  var startInteraction = function startInteraction() {\n    interactionHandleRef.current = InteractionManager.createInteractionHandle();\n  };\n\n  var endInteraction = function endInteraction() {\n    if (interactionHandleRef.current != null) {\n      InteractionManager.clearInteractionHandle(interactionHandleRef.current);\n      interactionHandleRef.current = null;\n    }\n  };\n\n  var hideKeyboard = function hideKeyboard() {\n    if (keyboardDismissMode === 'on-drag') {\n      Keyboard.dismiss();\n    }\n  };\n\n  var onGestureStart = function onGestureStart() {\n    startInteraction();\n    hideKeyboard();\n    hideStatusBar(true);\n  };\n\n  var onGestureEnd = function onGestureEnd() {\n    endInteraction();\n  };\n\n  var hitSlop = isRight ? {\n    right: 0,\n    width: isOpen ? undefined : swipeEdgeWidth\n  } : {\n    left: 0,\n    width: isOpen ? undefined : swipeEdgeWidth\n  };\n  var touchStartX = useSharedValue(0);\n  var touchX = useSharedValue(0);\n  var translationX = useSharedValue(getDrawerTranslationX(open));\n  var gestureState = useSharedValue(GestureState.UNDETERMINED);\n  var toggleDrawer = React.useCallback(function (open, velocity) {\n    'worklet';\n\n    var translateX = getDrawerTranslationX(open);\n    touchStartX.value = 0;\n    touchX.value = 0;\n    translationX.value = withSpring(translateX, {\n      velocity: velocity,\n      stiffness: 1000,\n      damping: 500,\n      mass: 3,\n      overshootClamping: true,\n      restDisplacementThreshold: 0.01,\n      restSpeedThreshold: 0.01\n    }, function () {\n      if (translationX.value === getDrawerTranslationX(true)) {\n        runOnJS(onOpen)();\n      } else if (translationX.value === getDrawerTranslationX(false)) {\n        runOnJS(onClose)();\n      }\n    });\n  }, [getDrawerTranslationX, onClose, onOpen, touchStartX, touchX, translationX]);\n  React.useEffect(function () {\n    return toggleDrawer(open);\n  }, [open, toggleDrawer]);\n  var onGestureEvent = useAnimatedGestureHandler({\n    onStart: function onStart(event, ctx) {\n      ctx.startX = translationX.value;\n      gestureState.value = event.state;\n      touchStartX.value = event.x;\n      runOnJS(onGestureStart)();\n    },\n    onActive: function onActive(event, ctx) {\n      touchX.value = event.x;\n      translationX.value = ctx.startX + event.translationX;\n      gestureState.value = event.state;\n    },\n    onEnd: function onEnd(event) {\n      gestureState.value = event.state;\n      var nextOpen = Math.abs(event.translationX) > SWIPE_DISTANCE_MINIMUM && Math.abs(event.translationX) > swipeVelocityThreshold || Math.abs(event.translationX) > swipeDistanceThreshold ? drawerPosition === 'left' ? (event.velocityX === 0 ? event.translationX : event.velocityX) > 0 : (event.velocityX === 0 ? event.translationX : event.velocityX) < 0 : open;\n      toggleDrawer(nextOpen, event.velocityX);\n      runOnJS(onGestureEnd)();\n    }\n  });\n  var translateX = useDerivedValue(function () {\n    var touchDistance = drawerType === 'front' && gestureState.value === GestureState.ACTIVE ? minmax(drawerPosition === 'left' ? touchStartX.value - drawerWidth : dimensions.width - drawerWidth - touchStartX.value, 0, dimensions.width) : 0;\n    var translateX = drawerPosition === 'left' ? minmax(translationX.value + touchDistance, -drawerWidth, 0) : minmax(translationX.value - touchDistance, 0, drawerWidth);\n    return translateX;\n  });\n  var drawerAnimatedStyle = useAnimatedStyle(function () {\n    if (drawerType === 'permanent') {\n      return {};\n    }\n\n    return {\n      transform: [{\n        translateX: drawerType === 'back' ? 0 : translateX.value\n      }]\n    };\n  });\n  var contentAnimatedStyle = useAnimatedStyle(function () {\n    if (drawerType === 'permanent') {\n      return {};\n    }\n\n    return {\n      transform: [{\n        translateX: drawerType === 'front' ? 0 : drawerPosition === 'left' ? drawerWidth + translateX.value : translateX.value - drawerWidth\n      }]\n    };\n  });\n  var progress = useDerivedValue(function () {\n    return drawerType === 'permanent' ? 1 : interpolate(translateX.value, [getDrawerTranslationX(false), getDrawerTranslationX(true)], [0, 1]);\n  });\n  return React.createElement(DrawerProgressContext.Provider, {\n    value: progress\n  }, React.createElement(PanGestureHandler, _extends({\n    activeOffsetX: [-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM],\n    failOffsetY: [-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM],\n    hitSlop: hitSlop,\n    enabled: drawerType !== 'permanent' && swipeEnabled,\n    onGestureEvent: onGestureEvent\n  }, gestureHandlerProps), React.createElement(Animated.View, {\n    style: [styles.main, {\n      flexDirection: drawerType === 'permanent' && !isRight ? 'row-reverse' : 'row'\n    }]\n  }, React.createElement(Animated.View, {\n    style: [styles.content, contentAnimatedStyle]\n  }, React.createElement(View, {\n    accessibilityElementsHidden: isOpen && drawerType !== 'permanent',\n    importantForAccessibility: isOpen && drawerType !== 'permanent' ? 'no-hide-descendants' : 'auto',\n    style: styles.content\n  }, renderSceneContent()), drawerType !== 'permanent' ? React.createElement(Overlay, {\n    progress: progress,\n    onPress: function onPress() {\n      return toggleDrawer(false);\n    },\n    style: overlayStyle\n  }) : null), React.createElement(Animated.View, {\n    accessibilityViewIsModal: isOpen && drawerType !== 'permanent',\n    removeClippedSubviews: Platform.OS !== 'ios',\n    style: [styles.container, {\n      position: drawerType === 'permanent' ? 'relative' : 'absolute',\n      zIndex: drawerType === 'back' ? -1 : 0\n    }, drawerAnimatedStyle, drawerStyle]\n  }, renderDrawerContent()))));\n}\nvar styles = StyleSheet.create({\n  container: {\n    top: 0,\n    bottom: 0,\n    maxWidth: '100%',\n    width: DEFAULT_DRAWER_WIDTH\n  },\n  content: {\n    flex: 1\n  },\n  main: _objectSpread({\n    flex: 1\n  }, Platform.select({\n    web: null,\n    default: {\n      overflow: 'hidden'\n    }\n  }))\n});","map":{"version":3,"sources":["Drawer.tsx"],"names":["State","SWIPE_DISTANCE_MINIMUM","DEFAULT_DRAWER_WIDTH","minmax","Math","swipeVelocityThreshold","getDrawerWidth","width","StyleSheet","percentage","Number","dimensions","drawerWidth","isOpen","drawerType","isRight","drawerPosition","getDrawerTranslationX","open","hideStatusBar","hide","StatusBar","React","interactionHandleRef","startInteraction","InteractionManager","endInteraction","hideKeyboard","keyboardDismissMode","Keyboard","onGestureStart","onGestureEnd","hitSlop","right","swipeEdgeWidth","left","touchStartX","useSharedValue","touchX","translationX","gestureState","GestureState","toggleDrawer","translateX","withSpring","velocity","stiffness","damping","mass","overshootClamping","restDisplacementThreshold","restSpeedThreshold","runOnJS","onGestureEvent","useAnimatedGestureHandler","onStart","ctx","event","onActive","onEnd","nextOpen","useDerivedValue","touchDistance","drawerAnimatedStyle","useAnimatedStyle","transform","value","contentAnimatedStyle","progress","interpolate","styles","flexDirection","content","renderSceneContent","overlayStyle","Platform","position","zIndex","renderDrawerContent","container","top","bottom","maxWidth","flex","main","web","default","overflow"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  InteractionManager,\n  Keyboard,\n  Platform,\n  StatusBar,\n  StyleSheet,\n  View,\n} from 'react-native';\nimport {\n  PanGestureHandler,\n  PanGestureHandlerGestureEvent,\n  State as GestureState,\n} from 'react-native-gesture-handler';\nimport Animated, {\n  interpolate,\n  runOnJS,\n  useAnimatedGestureHandler,\n  useAnimatedStyle,\n  useDerivedValue,\n  useSharedValue,\n  withSpring,\n} from 'react-native-reanimated';\n\nimport type { DrawerProps } from '../../types';\nimport DrawerProgressContext from '../../utils/DrawerProgressContext';\nimport Overlay from './Overlay';\n\nconst SWIPE_DISTANCE_MINIMUM = 5;\nconst DEFAULT_DRAWER_WIDTH = '80%';\n\nconst minmax = (value: number, start: number, end: number) => {\n  'worklet';\n\n  return Math.min(Math.max(value, start), end);\n};\n\nexport default function Drawer({\n  dimensions,\n  drawerPosition,\n  drawerStyle,\n  drawerType,\n  gestureHandlerProps,\n  hideStatusBarOnOpen,\n  keyboardDismissMode,\n  onClose,\n  onOpen,\n  open,\n  overlayStyle,\n  renderDrawerContent,\n  renderSceneContent,\n  statusBarAnimation,\n  swipeDistanceThreshold,\n  swipeEdgeWidth,\n  swipeEnabled,\n  swipeVelocityThreshold,\n}: DrawerProps) {\n  const getDrawerWidth = (): number => {\n    const { width = DEFAULT_DRAWER_WIDTH } =\n      StyleSheet.flatten(drawerStyle) || {};\n\n    if (typeof width === 'string' && width.endsWith('%')) {\n      // Try to calculate width if a percentage is given\n      const percentage = Number(width.replace(/%$/, ''));\n\n      if (Number.isFinite(percentage)) {\n        return dimensions.width * (percentage / 100);\n      }\n    }\n\n    return typeof width === 'number' ? width : 0;\n  };\n\n  const drawerWidth = getDrawerWidth();\n\n  const isOpen = drawerType === 'permanent' ? true : open;\n  const isRight = drawerPosition === 'right';\n\n  const getDrawerTranslationX = React.useCallback(\n    (open: boolean) => {\n      'worklet';\n\n      if (drawerPosition === 'left') {\n        return open ? 0 : -drawerWidth;\n      }\n\n      return open ? 0 : drawerWidth;\n    },\n    [drawerPosition, drawerWidth]\n  );\n\n  const hideStatusBar = React.useCallback(\n    (hide: boolean) => {\n      if (hideStatusBarOnOpen) {\n        StatusBar.setHidden(hide, statusBarAnimation);\n      }\n    },\n    [hideStatusBarOnOpen, statusBarAnimation]\n  );\n\n  React.useEffect(() => {\n    hideStatusBar(isOpen);\n\n    return () => hideStatusBar(false);\n  }, [isOpen, hideStatusBarOnOpen, statusBarAnimation, hideStatusBar]);\n\n  const interactionHandleRef = React.useRef<number | null>(null);\n\n  const startInteraction = () => {\n    interactionHandleRef.current = InteractionManager.createInteractionHandle();\n  };\n\n  const endInteraction = () => {\n    if (interactionHandleRef.current != null) {\n      InteractionManager.clearInteractionHandle(interactionHandleRef.current);\n      interactionHandleRef.current = null;\n    }\n  };\n\n  const hideKeyboard = () => {\n    if (keyboardDismissMode === 'on-drag') {\n      Keyboard.dismiss();\n    }\n  };\n\n  const onGestureStart = () => {\n    startInteraction();\n    hideKeyboard();\n    hideStatusBar(true);\n  };\n\n  const onGestureEnd = () => {\n    endInteraction();\n  };\n\n  // FIXME: Currently hitSlop is broken when on Android when drawer is on right\n  // https://github.com/software-mansion/react-native-gesture-handler/issues/569\n  const hitSlop = isRight\n    ? // Extend hitSlop to the side of the screen when drawer is closed\n      // This lets the user drag the drawer from the side of the screen\n      { right: 0, width: isOpen ? undefined : swipeEdgeWidth }\n    : { left: 0, width: isOpen ? undefined : swipeEdgeWidth };\n\n  const touchStartX = useSharedValue(0);\n  const touchX = useSharedValue(0);\n  const translationX = useSharedValue(getDrawerTranslationX(open));\n  const gestureState = useSharedValue<GestureState>(GestureState.UNDETERMINED);\n\n  const toggleDrawer = React.useCallback(\n    (open: boolean, velocity?: number) => {\n      'worklet';\n\n      const translateX = getDrawerTranslationX(open);\n\n      touchStartX.value = 0;\n      touchX.value = 0;\n      translationX.value = withSpring(\n        translateX,\n        {\n          velocity,\n          stiffness: 1000,\n          damping: 500,\n          mass: 3,\n          overshootClamping: true,\n          restDisplacementThreshold: 0.01,\n          restSpeedThreshold: 0.01,\n        },\n        () => {\n          if (translationX.value === getDrawerTranslationX(true)) {\n            runOnJS(onOpen)();\n          } else if (translationX.value === getDrawerTranslationX(false)) {\n            runOnJS(onClose)();\n          }\n        }\n      );\n    },\n    [getDrawerTranslationX, onClose, onOpen, touchStartX, touchX, translationX]\n  );\n\n  React.useEffect(() => toggleDrawer(open), [open, toggleDrawer]);\n\n  const onGestureEvent = useAnimatedGestureHandler<\n    PanGestureHandlerGestureEvent,\n    { startX: number }\n  >({\n    onStart: (event, ctx) => {\n      ctx.startX = translationX.value;\n      gestureState.value = event.state;\n      touchStartX.value = event.x;\n\n      runOnJS(onGestureStart)();\n    },\n    onActive: (event, ctx) => {\n      touchX.value = event.x;\n      translationX.value = ctx.startX + event.translationX;\n      gestureState.value = event.state;\n    },\n    onEnd: (event) => {\n      gestureState.value = event.state;\n\n      const nextOpen =\n        (Math.abs(event.translationX) > SWIPE_DISTANCE_MINIMUM &&\n          Math.abs(event.translationX) > swipeVelocityThreshold) ||\n        Math.abs(event.translationX) > swipeDistanceThreshold\n          ? drawerPosition === 'left'\n            ? // If swiped to right, open the drawer, otherwise close it\n              (event.velocityX === 0 ? event.translationX : event.velocityX) > 0\n            : // If swiped to left, open the drawer, otherwise close it\n              (event.velocityX === 0 ? event.translationX : event.velocityX) < 0\n          : open;\n\n      toggleDrawer(nextOpen, event.velocityX);\n      runOnJS(onGestureEnd)();\n    },\n  });\n\n  const translateX = useDerivedValue(() => {\n    // Comment stolen from react-native-gesture-handler/DrawerLayout\n    //\n    // While closing the drawer when user starts gesture outside of its area (in greyed\n    // out part of the window), we want the drawer to follow only once finger reaches the\n    // edge of the drawer.\n    // E.g. on the diagram below drawer is illustrate by X signs and the greyed out area by\n    // dots. The touch gesture starts at '*' and moves left, touch path is indicated by\n    // an arrow pointing left\n    // 1) +---------------+ 2) +---------------+ 3) +---------------+ 4) +---------------+\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|.<-*..|    |XXXXXXXX|<--*..|    |XXXXX|<-----*..|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    +---------------+    +---------------+    +---------------+    +---------------+\n    //\n    // For the above to work properly we define animated value that will keep start position\n    // of the gesture. Then we use that value to calculate how much we need to subtract from\n    // the translationX. If the gesture started on the greyed out area we take the distance from the\n    // edge of the drawer to the start position. Otherwise we don't subtract at all and the\n    // drawer be pulled back as soon as you start the pan.\n    //\n    // This is used only when drawerType is \"front\"\n    const touchDistance =\n      drawerType === 'front' && gestureState.value === GestureState.ACTIVE\n        ? minmax(\n            drawerPosition === 'left'\n              ? touchStartX.value - drawerWidth\n              : dimensions.width - drawerWidth - touchStartX.value,\n            0,\n            dimensions.width\n          )\n        : 0;\n\n    const translateX =\n      drawerPosition === 'left'\n        ? minmax(translationX.value + touchDistance, -drawerWidth, 0)\n        : minmax(translationX.value - touchDistance, 0, drawerWidth);\n\n    return translateX;\n  });\n\n  const drawerAnimatedStyle = useAnimatedStyle(() => {\n    if (drawerType === 'permanent') {\n      return {};\n    }\n\n    return {\n      transform: [\n        {\n          translateX: drawerType === 'back' ? 0 : translateX.value,\n        },\n      ],\n    };\n  });\n\n  const contentAnimatedStyle = useAnimatedStyle(() => {\n    if (drawerType === 'permanent') {\n      return {};\n    }\n\n    return {\n      transform: [\n        {\n          translateX:\n            drawerType === 'front'\n              ? 0\n              : drawerPosition === 'left'\n              ? drawerWidth + translateX.value\n              : translateX.value - drawerWidth,\n        },\n      ],\n    };\n  });\n\n  const progress = useDerivedValue(() => {\n    return drawerType === 'permanent'\n      ? 1\n      : interpolate(\n          translateX.value,\n          [getDrawerTranslationX(false), getDrawerTranslationX(true)],\n          [0, 1]\n        );\n  });\n\n  return (\n    <DrawerProgressContext.Provider value={progress}>\n      <PanGestureHandler\n        activeOffsetX={[-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM]}\n        failOffsetY={[-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM]}\n        hitSlop={hitSlop}\n        enabled={drawerType !== 'permanent' && swipeEnabled}\n        onGestureEvent={onGestureEvent}\n        {...gestureHandlerProps}\n      >\n        {/* Immediate child of gesture handler needs to be an Animated.View */}\n        <Animated.View\n          style={[\n            styles.main,\n            {\n              flexDirection:\n                drawerType === 'permanent' && !isRight ? 'row-reverse' : 'row',\n            },\n          ]}\n        >\n          <Animated.View style={[styles.content, contentAnimatedStyle]}>\n            <View\n              accessibilityElementsHidden={isOpen && drawerType !== 'permanent'}\n              importantForAccessibility={\n                isOpen && drawerType !== 'permanent'\n                  ? 'no-hide-descendants'\n                  : 'auto'\n              }\n              style={styles.content}\n            >\n              {renderSceneContent()}\n            </View>\n            {drawerType !== 'permanent' ? (\n              <Overlay\n                progress={progress}\n                onPress={() => toggleDrawer(false)}\n                style={overlayStyle}\n              />\n            ) : null}\n          </Animated.View>\n          <Animated.View\n            accessibilityViewIsModal={isOpen && drawerType !== 'permanent'}\n            removeClippedSubviews={Platform.OS !== 'ios'}\n            style={[\n              styles.container,\n              {\n                position: drawerType === 'permanent' ? 'relative' : 'absolute',\n                zIndex: drawerType === 'back' ? -1 : 0,\n              },\n              drawerAnimatedStyle,\n              drawerStyle as any,\n            ]}\n          >\n            {renderDrawerContent()}\n          </Animated.View>\n        </Animated.View>\n      </PanGestureHandler>\n    </DrawerProgressContext.Provider>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    top: 0,\n    bottom: 0,\n    maxWidth: '100%',\n    width: DEFAULT_DRAWER_WIDTH,\n  },\n  content: {\n    flex: 1,\n  },\n  main: {\n    flex: 1,\n    ...Platform.select({\n      // FIXME: We need to hide `overflowX` on Web so the translated content doesn't show offscreen.\n      // But adding `overflowX: 'hidden'` prevents content from collapsing the URL bar.\n      web: null,\n      default: { overflow: 'hidden' },\n    }),\n  },\n});\n"]},"metadata":{},"sourceType":"module"}